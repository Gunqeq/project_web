import os
import json
import math
import re
from datetime import datetime
from urllib.parse import urlencode, quote_plus

import requests
from flask import Flask, request, jsonify, render_template_string
from flask_session import Session
from dotenv import load_dotenv
client_logs = []

# Optional: natural-language parsing with Gemini (if GEMINI_API_KEY is provided)
try:
    import google.generativeai as genai
    HAS_GEMINI = True
except Exception:
    HAS_GEMINI = False

load_dotenv()

# ==== ENV ====
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY", "")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY", "")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")

if HAS_GEMINI and GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel("gemini-1.5-flash")

# ==== FLASK ====
app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "dev-secret-key")
app.config["SESSION_TYPE"] = os.getenv("SESSION_TYPE", "filesystem")
Session(app)

# ==== CATEGORY MAP (EN+TH) - ปรับปรุงแล้ว ====
CATEGORY_MAP = {
    "ธรรมชาติ": ["tourist_attraction", "park", "natural_feature", "campground", "rv_park"],
    "วัด": ["place_of_worship", "hindu_temple", "mosque", "church"],
    "คาเฟ่": ["cafe", "bakery"],
    "ร้านอาหาร": ["restaurant", "meal_takeaway", "food"],
    "แหล่งเรียนรู้": ["museum", "library", "art_gallery", "book_store", "university"],
    "จุดชมวิว": ["tourist_attraction", "point_of_interest", "establishment"],
    "ชุมชน/ตลาด": ["market", "shopping_mall", "store", "supermarket"],
}

# เพิ่ม keywords สำหรับการค้นหาที่แม่นยำขึ้น
CATEGORY_KEYWORDS = {
    "ธรรมชาติ": ["national park", "waterfall", "mountain", "beach", "forest", "nature", "อุทยาน", "น้ำตก", "ภูเขา", "ป่า", "ชายหาด"],
    "วัด": ["temple", "wat", "mosque", "church", "วัด", "โบสถ์", "มัสยิด"],
    "คาเฟ่": ["cafe", "coffee", "bakery", "คาเฟ่", "กาแฟ", "เบเกอรี่"],
    "ร้านอาหาร": ["restaurant", "food", "ร้านอาหาร", "อาหาร", "โรงแรม"],
    "แหล่งเรียนรู้": ["museum", "library", "gallery", "พิพิธภัณฑ์", "ห้องสมุด", "หอศิลป์"],
    "จุดชมวิว": ["viewpoint", "scenic", "attraction", "จุดชมวิว", "ทิวทัศน์", "สถานที่ท่องเที่ยว"],
    "ชุมชน/ตลาด": ["market", "shopping", "mall", "ตลาด", "ห้าง", "ชุมชน"],
}

DEFAULT_TYPES_FOR_PROVINCE = ["tourist_attraction", "park", "museum", "art_gallery", "library", "cafe", "restaurant"]
ALL_TYPE_LIST = sorted({t for v in CATEGORY_MAP.values() for t in v} | set(DEFAULT_TYPES_FOR_PROVINCE))

# ==== UTILS ====
def km_between(p1, p2):
    # Haversine distance in km
    R = 6371.0
    lat1, lon1 = math.radians(p1[0]), math.radians(p1[1])
    lat2, lon2 = math.radians(p2[0]), math.radians(p2[1])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat/2)**2 + math.cos(lat1)*math.cos(lat2)*math.sin(dlon/2)**2
    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))
    return R * c

def build_maps_link_by_place_id(place_id):
    return f"https://www.google.com/maps/place/?q=place_id:{place_id}"

def build_maps_link_by_latlng(lat, lng, name=""):
    label = quote_plus(name) if name else f"{lat},{lng}"
    return f"https://www.google.com/maps/search/?api=1&query={lat}%2C{lng}&query_place_id=&query={label}"

def fmt_minutes(m):
    # round to integer minutes
    try:
        mm = int(round(float(m)))
        return f"{mm} นาที"
    except Exception:
        return None

def get_weather(lat, lon):
    if not OPENWEATHER_API_KEY:
        return None
    try:
        url = "https://api.openweathermap.org/data/2.5/weather"
        params = {
            "lat": lat,
            "lon": lon,
            "appid": OPENWEATHER_API_KEY,
            "units": "metric",
            "lang": "th"
        }
        r = requests.get(url, params=params, timeout=10)
        data = r.json()
        return {
            "condition": data["weather"][0]["description"] if data.get("weather") else None,
            "temp_c": data.get("main", {}).get("temp"),
            "humidity": data.get("main", {}).get("humidity"),
            "wind_kph": round(float(data.get("wind", {}).get("speed", 0))*3.6, 1) if data.get("wind") else None,
            "icon": f"https://openweathermap.org/img/wn/{data['weather'][0]['icon']}@2x.png" if data.get("weather") else None,
            "as_of": datetime.fromtimestamp(data.get("dt", 0)).strftime("%Y-%m-%d %H:%M") if data.get("dt") else None,
        }
    except Exception:
        return None

def place_details(place_id, fields=("name","opening_hours","current_opening_hours","formatted_address","geometry","rating","user_ratings_total","international_phone_number","website","types")):
    url = "https://maps.googleapis.com/maps/api/place/details/json"
    params = {
        "place_id": place_id,
        "fields": ",".join(fields),
        "language": "th",
        "region": "th",
        "key": GOOGLE_MAPS_API_KEY,
    }
    r = requests.get(url, params=params, timeout=10)
    return r.json().get("result", {})

def text_search(query, pagetoken=None):
    url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
    params = {"query": query, "language": "th", "region": "th", "key": GOOGLE_MAPS_API_KEY}
    if pagetoken:
        params["pagetoken"] = pagetoken
    r = requests.get(url, params=params, timeout=10)
    return r.json()

def nearby_search(lat, lng, radius_m=1500, type_filters=None, keyword=None):
    """ปรับปรุงให้ค้นหาแม่นยำขึ้น"""
    url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
    params = {
        "location": f"{lat},{lng}",
        "radius": radius_m,
        "language": "th",
        "region": "th",
        "key": GOOGLE_MAPS_API_KEY,
    }
    if keyword:
        params["keyword"] = keyword
    if type_filters:
        # Use first type (API supports one 'type')
        params["type"] = type_filters[0]
    r = requests.get(url, params=params, timeout=10)
    return r.json()

def directions(origin, destination, mode="driving"):
    url = "https://maps.googleapis.com/maps/api/directions/json"
    params = {
        "origin": origin,
        "destination": destination,
        "mode": mode,
        "language": "th",
        "region": "th",
        "alternatives": "false",
        "key": GOOGLE_MAPS_API_KEY,
    }
    r = requests.get(url, params=params, timeout=10)
    return r.json()

def estimate_detour_minutes(route_points, place_lat, place_lng):
    # Approx: shortest distance from place to any route point (km), assume urban 40km/h => minutes
    if not route_points:
        return None
    min_km = min(km_between((place_lat, place_lng), (p["lat"], p["lng"])) for p in route_points)
    # out-and-back detour ~ 2x shortest distance, speed 40 km/h => time (h) * 60
    minutes = (2 * min_km / 40.0) * 60.0
    return round(minutes)

def categorize_place(place_data):
    """ปรับปรุงการจัดหมวดหมู่สถานที่ให้แม่นยำขึ้น"""
    place_types = place_data.get("types", [])
    place_name = (place_data.get("name", "") or "").lower()
    
    categories = []
    
    # ตรวจสอบจาก types ก่อน
    for th_cat, type_list in CATEGORY_MAP.items():
        for place_type in place_types:
            if place_type in type_list:
                if th_cat not in categories:
                    categories.append(th_cat)
                break
    
    # ตรวจสอบจาก keywords ในชื่อสถานที่
    for th_cat, keywords in CATEGORY_KEYWORDS.items():
        for keyword in keywords:
            if keyword.lower() in place_name:
                if th_cat not in categories:
                    categories.append(th_cat)
                break
    
    return categories

def filter_places_by_categories(places, selected_categories):
    """กรองสถานที่ตามหมวดหมู่ที่เลือก"""
    if not selected_categories:
        return places
    
    filtered_places = []
    for place in places:
        place_categories = categorize_place(place)
        # ถ้าสถานที่มีหมวดหมู่ที่ตรงกับที่เลือก
        if any(cat in selected_categories for cat in place_categories):
            filtered_places.append(place)
    
    return filtered_places

def parse_free_text(q: str):
    """
    Parse natural Thai text like: 'จะขับรถจาก กทม ไป เชียงใหม่ แวะไหนดี?'
    Returns dict with origin, destination, categories (if any), mode
    """
    q = q.strip()
    # simple heuristic
    mode = "driving" if "ขับรถ" in q or "รถ" in q else "walking" if "เดิน" in q else "driving"
    # try regex
    m = re.search(r"(?:จาก|เริ่ม(?:จาก)?)\s*([^ไป]+)\s*(?:ไป|ถึง)\s*([^,?]+)", q)
    origin = None
    destination = None
    if m:
        origin = m.group(1).strip()
        destination = m.group(2).strip()
    # category keywords
    cats = []
    for k in CATEGORY_MAP.keys():
        if k in q:
            cats.append(k)
    if not cats:
        # if 'แวะ' or general intent, suggest mixed
        cats = ["ธรรมชาติ","คาเฟ่","วัด","ร้านอาหาร"]
    return {"origin": origin, "destination": destination, "categories": cats, "mode": mode}

def gemini_understand(q: str):
    if not (HAS_GEMINI and GEMINI_API_KEY):
        return parse_free_text(q)
    prompt = f"""
คุณเป็นตัวช่วยวางแผนการเดินทางในประเทศไทย
อ่านข้อความต่อไปนี้แล้วสรุปเป็น JSON:

ข้อความ: {q}

สรุปเป็น JSON คีย์ดังนี้:
{{
 "origin": "จุดเริ่มต้น (เช่น กรุงเทพ, สนามบินดอนเมือง, นครนายก)",
 "destination": "จุดหมาย (เช่น เชียงใหม่, เขาใหญ่)",
 "mode": "driving|walking|bicycling|transit",
 "categories": ["ธรรมชาติ","วัด","คาเฟ่","ร้านอาหาร","แหล่งเรียนรู้","จุดชมวิว","ชุมชน/ตลาด"]
}}
หากหาไม่ได้ให้เดาค่าที่เหมาะสม และอย่ามีข้อความอื่นนอกจาก JSON
"""
    try:
        resp = gemini_model.generate_content(prompt)
        txt = resp.text.strip(" \n`")
        data = json.loads(txt)
        return data
    except Exception:
        return parse_free_text(q)

# ==== CORE LOGIC ====
def search_by_province(province: str, categories_th=None, limit=20):
    """ปรับปรุงการค้นหาตามจังหวัดให้แม่นยำขึ้น"""
    if not GOOGLE_MAPS_API_KEY:
        return {"error": "GOOGLE_MAPS_API_KEY not configured"}
    
    # สร้าง query ที่เฉพาะเจาะจงมากขึ้น
    if not categories_th:
        query = f"สถานที่ท่องเที่ยว {province} ประเทศไทย"
    else:
        # สร้าง query ตามหมวดหมู่ที่เลือก
        category_keywords = []
        for cat in categories_th:
            if cat in CATEGORY_KEYWORDS:
                category_keywords.extend(CATEGORY_KEYWORDS[cat][:3])  # เอาแค่ 3 keywords แรก
        
        if category_keywords:
            keywords_str = " ".join(category_keywords[:5])  # เอาแค่ 5 keywords
            query = f"{keywords_str} {province} ประเทศไทย"
        else:
            query = f"สถานที่ท่องเที่ยว {province} ประเทศไทย"

    print(f"Search query: {query}")  # Debug
    
    base = text_search(query)
    results = base.get("results", [])

    # กรองผลลัพธ์ตามหมวดหมู่ที่เลือก
    if categories_th:
        results = filter_places_by_categories(results, categories_th)

    items = []
    for r in results[:limit]:
        place_id = r.get("place_id")
        details = place_details(place_id)
        name = details.get("name", r.get("name"))
        addr = details.get("formatted_address", r.get("formatted_address"))
        loc = details.get("geometry", {}).get("location", r.get("geometry", {}).get("location", {}))
        lat, lng = loc.get("lat"), loc.get("lng")
        opening = details.get("current_opening_hours") or details.get("opening_hours")
        weekday_text = opening.get("weekday_text") if opening else None
        map_url = build_maps_link_by_place_id(place_id) if place_id else build_maps_link_by_latlng(lat, lng, name)
        rating = details.get("rating", r.get("rating"))
        total = details.get("user_ratings_total", r.get("user_ratings_total"))
        website = details.get("website")
        weather = get_weather(lat, lng) if (lat and lng) else None

        # ใช้ function ใหม่ในการจัดหมวดหมู่
        cats = categorize_place(details if details.get("types") else r)

        items.append({
            "name": name,
            "place_id": place_id,
            "address": addr,
            "location": {"lat": lat, "lng": lng},
            "rating": rating,
            "user_ratings_total": total,
            "website": website,
            "opening_hours_text": weekday_text,
            "map_url": map_url,
            "weather": weather,
            "categories": cats
        })
    return {"province": province, "items": items}

def route_suggestions(origin, destination, categories_th=None, mode="driving", search_radius_m=2000, per_point=5):
    """ปรับปรุงการแนะนำเส้นทางให้แม่นยำขึ้น"""
    if not GOOGLE_MAPS_API_KEY:
        return {"error": "GOOGLE_MAPS_API_KEY not configured"}
    
    # Directions
    d = directions(origin, destination, mode=mode)
    if d.get("status") != "OK":
        return {"error": f"Directions failed: {d.get('status')}", "raw": d}

    route = d["routes"][0]
    leg = route["legs"][0]
    steps = leg.get("steps", [])
    
    # sample points: use step end locations to reduce API calls
    route_points = []
    for s in steps:
        end = s.get("end_location")
        if end:
            route_points.append({"lat": end["lat"], "lng": end["lng"]})

    # build type filters ตามหมวดหมู่ที่เลือก
    type_filters = []
    search_keywords = []
    
    if categories_th:
        for c in categories_th:
            if c in CATEGORY_MAP:
                type_filters.extend(CATEGORY_MAP[c])
            if c in CATEGORY_KEYWORDS:
                search_keywords.extend(CATEGORY_KEYWORDS[c][:2])  # เอา 2 keywords ต่อหมวดหมู่
    
    if not type_filters:
        type_filters = ["tourist_attraction","cafe","restaurant","museum","park"]

    seen = set()
    found = []
    
    # ลดจำนวน sampling points เพื่อประสิทธิภาพ
    sample_points = route_points[::max(1, len(route_points)//15 or 1)]  # ลดเหลือ ~15 points
    
    for idx, p in enumerate(sample_points):
        # ค้นหาตาม type ก่อน
        for type_filter in type_filters[:3]:  # เอาแค่ 3 types แรก
            nr = nearby_search(p["lat"], p["lng"], radius_m=search_radius_m, type_filters=[type_filter])
            
            for r in nr.get("results", [])[:per_point]:
                pid = r.get("place_id")
                if not pid or pid in seen:
                    continue
                seen.add(pid)
                
                # ตรวจสอบว่าสถานที่นี้ตรงกับหมวดหมู่ที่เลือกหรือไม่
                if categories_th:
                    place_cats = categorize_place(r)
                    if not any(cat in categories_th for cat in place_cats):
                        continue  # ข้ามถ้าไม่ตรงหมวดหมู่
                
                detour_min = estimate_detour_minutes(route_points, r["geometry"]["location"]["lat"], r["geometry"]["location"]["lng"])
                details = place_details(pid)
                name = details.get("name", r.get("name"))
                addr = details.get("formatted_address", r.get("vicinity"))
                loc = details.get("geometry", {}).get("location", r.get("geometry", {}).get("location", {}))
                lat, lng = loc.get("lat"), loc.get("lng")
                opening = details.get("current_opening_hours") or details.get("opening_hours")
                weekday_text = opening.get("weekday_text") if opening else None
                map_url = build_maps_link_by_place_id(pid) if pid else build_maps_link_by_latlng(lat, lng, name)
                rating = details.get("rating", r.get("rating"))
                total = details.get("user_ratings_total", r.get("user_ratings_total"))
                website = details.get("website")
                weather = get_weather(lat, lng) if (lat and lng) else None

                # ใช้ function ใหม่ในการจัดหมวดหมู่
                cats = categorize_place(details if details.get("types") else r)

                found.append({
                    "name": name,
                    "place_id": pid,
                    "address": addr,
                    "location": {"lat": lat, "lng": lng},
                    "rating": rating,
                    "user_ratings_total": total,
                    "website": website,
                    "opening_hours_text": weekday_text,
                    "map_url": map_url,
                    "weather": weather,
                    "detour_minutes_est": detour_min,
                    "categories": cats
                })

    # sort by minimal detour then rating
    found.sort(key=lambda x: (x["detour_minutes_est"] if x["detour_minutes_est"] is not None else 9999, -(x["rating"] or 0)))
    
    summary = {
        "origin": origin,
        "destination": destination,
        "mode": mode,
        "distance_text": leg.get("distance", {}).get("text"),
        "duration_text": leg.get("duration", {}).get("text"),
        "polyline": route.get("overview_polyline", {}).get("points"),
    }
    
    return {"route": summary, "stops": found[:50]}

# ==== ROUTES ====

INDEX_HTML = r"""
<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>🔥 Travel Route Chatbot — Thailand</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="icon" type="image/png" href="/static/logo.png?v=1">
  <style>
    :root { 
      --bg:#0b0f19; 
      --panel:#12182b; 
      --accent:#ff2d8b; 
      --accent2:#7b5cff; 
      --accent3:#00d4aa;
      --text:#e6e7ee; 
      --muted:#94a3b8;
      --glow: rgba(255, 45, 139, 0.3);
    }
    
    *{box-sizing:border-box}
    
    body{
      margin:0;
      background: 
        radial-gradient(ellipse at top left, rgba(255,45,139,0.15), transparent 50%),
        radial-gradient(ellipse at bottom right, rgba(123,92,255,0.12), transparent 50%),
        radial-gradient(ellipse at center, rgba(0,212,170,0.08), transparent 70%),
        linear-gradient(135deg, #0b0f19 0%, #1a1f2e 100%);
      color:var(--text); 
      font-family:Prompt,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;
      overflow-x: hidden;
    }

    /* Animated Background Particles */
    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }
    
    .particle {
      position: absolute;
      width: 2px;
      height: 2px;
      background: rgba(255, 45, 139, 0.6);
      border-radius: 50%;
      animation: float 20s infinite linear;
    }
    
    .particle:nth-child(2n) {
      background: rgba(123, 92, 255, 0.6);
      animation-duration: 25s;
    }
    
    .particle:nth-child(3n) {
      background: rgba(0, 212, 170, 0.6);
      animation-duration: 15s;
    }
    
    @keyframes float {
      from {
        transform: translateY(100vh) rotate(0deg);
        opacity: 0;
      }
      10% { opacity: 1; }
      90% { opacity: 1; }
      to {
        transform: translateY(-100vh) rotate(360deg);
        opacity: 0;
      }
    }

    /* Hamburger Menu */
    .menu-toggle {
      position: fixed;
      top: 20px;
      left: 20px;
      z-index: 1000;
      width: 50px;
      height: 50px;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 4px 20px rgba(255, 45, 139, 0.3);
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }
    
    .menu-toggle:hover {
      transform: scale(1.1);
      box-shadow: 0 6px 25px rgba(255, 45, 139, 0.5);
    }
    
    .menu-toggle.active {
      transform: rotate(90deg);
    }
    
    .hamburger {
      width: 20px;
      height: 2px;
      background: white;
      position: relative;
      transition: all 0.3s ease;
    }
    
    .hamburger::before,
    .hamburger::after {
      content: '';
      position: absolute;
      width: 20px;
      height: 2px;
      background: white;
      transition: all 0.3s ease;
    }
    
    .hamburger::before { top: -6px; }
    .hamburger::after { top: 6px; }
    
    .menu-toggle.active .hamburger { background: transparent; }
    .menu-toggle.active .hamburger::before {
      top: 0;
      transform: rotate(45deg);
    }
    .menu-toggle.active .hamburger::after {
      top: 0;
      transform: rotate(-45deg);
    }

    /* Side Menu */
    .side-menu {
      position: fixed;
      top: 0;
      left: -350px;
      width: 350px;
      height: 100vh;
      background: linear-gradient(135deg, rgba(18, 24, 43, 0.95), rgba(11, 15, 25, 0.95));
      backdrop-filter: blur(20px);
      border-right: 1px solid rgba(255, 255, 255, 0.1);
      transition: left 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      z-index: 999;
      overflow-y: auto;
    }
    
    .side-menu.open {
      left: 0;
    }
    
    .menu-header {
      padding: 80px 30px 30px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .menu-title {
      font-family: 'Orbitron', monospace;
      font-size: 24px;
      font-weight: 900;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 10px;
    }
    
    .menu-subtitle {
      color: var(--muted);
      font-size: 14px;
    }
    
    .menu-items {
      padding: 20px 0;
    }
    
    .menu-item {
      display: flex;
      align-items: center;
      padding: 15px 30px;
      color: var(--text);
      text-decoration: none;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .menu-item::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      transform: scaleY(0);
      transition: transform 0.3s ease;
    }
    
    .menu-item:hover {
      background: rgba(255, 45, 139, 0.1);
      transform: translateX(10px);
    }
    
    .menu-item:hover::before {
      transform: scaleY(1);
    }
    
    .menu-item i {
      width: 24px;
      margin-right: 15px;
      font-size: 18px;
    }
    
    .menu-item .badge {
      margin-left: auto;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
    }

    /* Overlay */
    .menu-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      z-index: 998;
    }
    
    .menu-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    /* Enhanced Main Content */
    .wrap{
      max-width:1200px;
      margin: 100px auto 20px;
      padding:16px;
      position: relative;
      z-index: 2;
    }
    
    .header{
      padding: 24px 28px;
      background: linear-gradient(135deg, rgba(255,45,139,.15), rgba(123,92,255,.12), rgba(0,212,170,.08));
      border: 1px solid rgba(255,255,255,.12);
      border-radius: 20px;
      box-shadow: 
        0 20px 60px rgba(0,0,0,.4),
        inset 0 1px 0 rgba(255,255,255,.1);
      position: relative;
      overflow: hidden;
    }
    
    .header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    }
    
    .title{
      display: flex;
      align-items: center;
      gap: 15px;
      font-size: 28px;
      font-weight: 700;
      letter-spacing: .5px;
      font-family: 'Orbitron', monospace;
    }
    
    .title .fire-emoji {
      font-size: 32px;
      animation: fireGlow 2s ease-in-out infinite alternate;
    }
    
    @keyframes fireGlow {
      from { text-shadow: 0 0 10px #ff6b35, 0 0 20px #ff6b35, 0 0 30px #ff6b35; }
      to { text-shadow: 0 0 20px #ff6b35, 0 0 30px #ff6b35, 0 0 40px #ff6b35; }
    }
    
    .title .badge{
      font-size: 14px;
      padding: 6px 12px;
      border-radius: 999px;
      background: linear-gradient(135deg, rgba(255,45,139,.3), rgba(123,92,255,.2));
      border: 1px solid rgba(255,45,139,.6);
      font-family: 'Prompt', sans-serif;
      backdrop-filter: blur(10px);
    }

    /* Enhanced Grid and Panels */
    .grid{
      display: grid;
      grid-template-columns: 1.2fr .8fr;
      gap: 20px;
      margin-top: 20px;
    }
    
    .panel{
      background: linear-gradient(135deg, rgba(18,24,43,0.9), rgba(11,15,25,0.8));
      border: 1px solid rgba(255,255,255,.08);
      border-radius: 20px;
      box-shadow: 
        inset 0 1px 0 rgba(255,255,255,.08),
        0 15px 45px rgba(0,0,0,.4);
      overflow: hidden;
      backdrop-filter: blur(15px);
      position: relative;
    }
    
    .panel::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(255,45,139,0.5), transparent);
    }
    
    .panel h3{
      margin: 0;
      padding: 18px 20px;
      border-bottom: 1px solid rgba(255,255,255,.08);
      background: linear-gradient(135deg, rgba(255,255,255,.06), rgba(255,45,139,.03));
      font-size: 18px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .panel h3 i {
      color: var(--accent);
    }
    
    .row{
      display: flex;
      gap: 10px;
      padding: 16px 20px;
    }
    
    .row input,.row select{
      flex: 1;
      padding: 14px 16px;
      border-radius: 12px;
      background: rgba(15, 20, 36, 0.8);
      color: var(--text);
      border: 1px solid rgba(255,255,255,.1);
      outline: none;
      transition: all 0.3s ease;
      font-size: 14px;
    }
    
    .row input:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 3px rgba(255, 45, 139, 0.1);
      background: rgba(15, 20, 36, 1);
    }
    
    .row button{
      padding: 14px 18px;
      border: none;
      border-radius: 12px;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      color: white;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      font-size: 14px;
      position: relative;
      overflow: hidden;
    }
    
    .row button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .row button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255, 45, 139, 0.4);
    }
    
    .row button:hover::before {
      left: 100%;
    }
    
    .row .ghost{
      background: transparent;
      border: 1px solid rgba(255,255,255,.2);
    }
    
    .row .ghost:hover {
      background: rgba(255,45,139,.1);
      border-color: var(--accent);
    }
    
    .chips{
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      padding: 12px 20px 20px;
    }
    
    .chip{
      padding: 8px 14px;
      border-radius: 999px;
      border: 1px solid rgba(255,255,255,.15);
      background: rgba(15, 20, 36, 0.6);
      font-size: 13px;
      cursor: pointer;
      user-select: none;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      position: relative;
      overflow: hidden;
    }
    
    .chip::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(255,45,139,.2), rgba(123,92,255,.1));
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .chip:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 45, 139, 0.2);
    }
    
    .chip:hover::before {
      opacity: 1;
    }
    
    .chip.on{
      background: linear-gradient(135deg, rgba(255,45,139,.3), rgba(123,92,255,.2));
      border-color: rgba(255,255,255,.3);
      color: white;
      transform: scale(1.05);
    }
    
    .place{
      padding: 16px 20px;
      border-bottom: 1px dashed rgba(255,255,255,.1);
      transition: all 0.3s ease;
    }
    
    .place:hover {
      background: rgba(255, 45, 139, 0.05);
      transform: translateX(5px);
    }
    
    .place .name{
      font-weight: 700;
      font-size: 16px;
      margin-bottom: 5px;
    }
    
    .meta{
      font-size: 13px;
      color: var(--muted);
      margin-bottom: 3px;
    }
    
    .openhours{
      font-size: 12px;
      white-space: pre-line;
      color: #eaeaea;
      background: rgba(0,0,0,.2);
      padding: 8px;
      border-radius: 6px;
      margin: 8px 0;
    }
    
    .weather {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 13px;
      color: #ffffff;
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
      padding: 8px 12px;
      border-radius: 12px;
      margin: 8px 0;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
    }
    
    a{
      color: #a5b4fc;
      transition: color 0.3s ease;
    }
    
    a:hover {
      color: var(--accent);
    }

    /* Enhanced Responsive */
    @media (max-width: 900px){ 
      .grid{grid-template-columns:1fr; } 
      #map{height:400px}
      .menu-toggle { top: 15px; left: 15px; }
      .wrap { margin-top: 80px; }
      .side-menu { width: 280px; left: -280px; }
    }

    /* Enhanced Log Styles */
    #log {
      height: 220px;
      overflow-y: auto;
      padding: 16px;
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.15);
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.15);
      backdrop-filter: blur(10px);
      position: relative;
      margin: 16px 20px 20px;
    }
    
    #log::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255,255,255,0.05);
      border-radius: 16px;
      pointer-events: none;
    }

    .log-entry {
      display: flex;
      align-items: flex-start;
      padding: 12px 14px;
      margin-bottom: 8px;
      border-radius: 12px;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      box-shadow: 0 4px 16px rgba(0,0,0,0.1);
      position: relative;
      overflow: hidden;
    }

    .log-entry::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      background: var(--log-color, #17a2b8);
      transition: width 0.3s ease;
    }

    .log-entry:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 12px 28px rgba(0,0,0,0.2);
    }

    .log-entry:hover::before {
      width: 8px;
    }

    .log-latest {
      animation: slideIn 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275), pulse 2s infinite;
      box-shadow: 0 8px 25px rgba(0,123,255,0.4);
    }

    .log-left {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-right: 12px;
      min-width: 70px;
    }

    .log-time {
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
      color: #666;
      font-size: 11px;
      font-weight: 600;
      background: rgba(0,0,0,0.08);
      padding: 3px 6px;
      border-radius: 6px;
      margin-bottom: 5px;
    }

    .log-icon {
      font-size: 18px;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    .log-content {
      flex: 1;
      position: relative;
    }

    .log-message {
      color: #2d3748;
      font-weight: 500;
      line-height: 1.4;
      word-break: break-word;
      font-size: 13px;
    }

    .log-pulse {
      position: absolute;
      right: -10px;
      top: 50%;
      transform: translateY(-50%);
      width: 8px;
      height: 8px;
      background: #00d4aa;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .log-info    { --log-color: #ff7eb3; }
    .log-success { --log-color: #7ed6ff; }
    .log-warning { --log-color: #fbc531; }
    .log-error   { --log-color: #e84118; }
    .log-route   { --log-color: #9c88ff; }
    .log-search  { --log-color: #f368e0; }
    
    #log::-webkit-scrollbar { width: 6px; }
    #log::-webkit-scrollbar-track { 
      background: rgba(255,255,255,0.1); 
      border-radius: 8px; 
    }
    #log::-webkit-scrollbar-thumb { 
      background: linear-gradient(135deg, var(--accent), var(--accent2)); 
      border-radius: 8px; 
      transition: all 0.3s ease; 
    }
    #log::-webkit-scrollbar-thumb:hover { 
      background: linear-gradient(135deg, var(--accent2), var(--accent)); 
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateX(-30px) scale(0.9); }
      to { opacity: 1; transform: translateX(0) scale(1); }
    }

    @keyframes pulse {
      0%, 100% { box-shadow: 0 0 0 0 rgba(0, 212, 170, 0.7); }
      50% { box-shadow: 0 0 0 10px rgba(0, 212, 170, 0); }
    }

    /* Cool Map Container */
    .map-container {
      position: relative;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 20px 60px rgba(0,0,0,.4);
    }
    
    .map-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--accent), var(--accent2), var(--accent3));
      z-index: 1000;
    }

    /* Status Indicators */
    .status-bar {
      display: flex;
      gap: 15px;
      padding: 12px 20px;
      background: rgba(0,0,0,.3);
      border-top: 1px solid rgba(255,255,255,.1);
      font-size: 12px;
      color: var(--muted);
    }
    
    .status-item {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--accent3);
      animation: pulse 2s infinite;
    }

    /* Quick Action Floating Buttons */
    .quick-actions {
      position: fixed;
      bottom: 30px;
      right: 30px;
      display: flex;
      flex-direction: column;
      gap: 15px;
      z-index: 500;
    }
    
    .quick-btn {
      width: 56px;
      height: 56px;
      border-radius: 50%;
      border: none;
      background: linear-gradient(135deg, var(--accent), var(--accent2));
      color: white;
      font-size: 20px;
      cursor: pointer;
      box-shadow: 0 4px 20px rgba(255, 45, 139, 0.3);
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .quick-btn:hover {
      transform: scale(1.1) rotate(5deg);
      box-shadow: 0 6px 25px rgba(255, 45, 139, 0.5);
    }
    
    .quick-btn.secondary {
      background: linear-gradient(135deg, var(--accent3), var(--accent2));
    }

    /* Line Modal Styles */
    .line-btn {
      background: #00C300 !important;
      animation: pulse 2s infinite;
    }

    .line-btn:hover {
      background: #00B900 !important;
      transform: translateY(-5px) scale(1.05);
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      background: #00C300;
      margin: 15% auto;
      padding: 30px;
      border-radius: 25px;
      width: 90%;
      max-width: 350px;
      text-align: center;
      color: white;
      position: relative;
      animation: slideIn 0.5s ease-out;
    }

    .close {
      position: absolute;
      right: 20px;
      top: 20px;
      color: white;
      font-size: 28px;
      cursor: pointer;
    }

    .line-logo { font-size: 50px; margin-bottom: 15px; }
    .qr-code img { 
      width: 180px; 
      height: 180px; 
      border-radius: 10px;
    }
    .line-id { 
      background: rgba(255,255,255,0.2); 
      padding: 10px; 
      border-radius: 10px; 
      margin: 15px 0; 
    }
    .copy-btn { 
      background: rgba(255,255,255,0.2); 
      border: none; 
      color: white; 
      padding: 10px 20px; 
      border-radius: 10px; 
      cursor: pointer; 
    }
  </style>
</head>
<body>
  <!-- Animated Background Particles -->
  <div class="particles" id="particles"></div>

  <!-- Menu Toggle Button -->
  <button class="menu-toggle" id="menuToggle">
    <div class="hamburger"></div>
  </button>

  <!-- Side Menu -->
  <nav class="side-menu" id="sideMenu">
    <div class="menu-header">
      <div class="menu-title">TravelBot</div>
      <div class="menu-subtitle">AI-Powered Route Planning</div>
    </div>
    <div class="menu-items">
      <a href="#" class="menu-item" onclick="scrollToSection('route')">
        <i class="fas fa-route"></i>
        <span>วางแผนเส้นทาง</span>
        <span class="badge">HOT</span>
      </a>
      <a href="#" class="menu-item" onclick="scrollToSection('province')">
        <i class="fas fa-map-marker-alt"></i>
        <span>ค้นหาจังหวัด</span>
      </a>
      <a href="#" class="menu-item" onclick="scrollToSection('map')">
        <i class="fas fa-globe-asia"></i>
        <span>แผนที่</span>
      </a>
      <a href="#" class="menu-item" onclick="clearAllData()">
        <i class="fas fa-trash-alt"></i>
        <span>ล้างข้อมูล</span>
      </a>
      <a href="#" class="menu-item" onclick="showStats()">
        <i class="fas fa-chart-line"></i>
        <span>สถิติการใช้งาน</span>
        <span class="badge">NEW</span>
      </a>
      <a href="#" class="menu-item" onclick="showHelp()">
        <i class="fas fa-question-circle"></i>
        <span>คู่มือการใช้งาน</span>
      </a>
      <a href="#" class="menu-item" onclick="showAbout()">
        <i class="fas fa-info-circle"></i>
        <span>เกี่ยวกับเรา</span>
      </a>
    </div>
  </nav>

  <!-- Menu Overlay -->
  <div class="menu-overlay" id="menuOverlay"></div>

  <!-- Main Content -->
  <div class="wrap">
    <div class="header">
      <div class="title">
        <span class="fire-emoji">🔥</span>
        Travel Route Chatbot 
        <span class="badge">Thailand</span>
      </div>
      <div style="margin-top:8px;color:#cbd5e1;font-size:14px">
        พิมพ์สไตล์แชทได้ เช่น "จะขับรถจาก กทม ไป เชียงใหม่ แวะไหนดี? ธรรมชาติ คาเฟ่"
        หรือโหมดจังหวัด: "นครนายก"
      </div>
    </div>

    <div class="grid">
      <div class="panel" id="route">
        <h3><i class="fas fa-route"></i> โหมดเส้นทาง (Route)</h3>
        <div class="row">
          <input id="origin" placeholder="จุดเริ่ม (เช่น กรุงเทพ, สนามบินดอนเมืองฯ)" />
          <input id="dest" placeholder="จุดหมาย (เช่น เชียงใหม่, เขาใหญ่)" />
        </div>
        <div class="chips" id="catChips"></div>
        <div class="row">
          <button onclick="planRoute()"><i class="fas fa-search"></i> แนะนำจุดแวะเที่ยวตามเส้นทาง</button>
          <button class="ghost" onclick="nlQuery()"><i class="fas fa-comments"></i> พิมพ์เป็นภาษาธรรมชาติ</button>
        </div>
        <div id="log"></div>
        <div class="status-bar">
          <div class="status-item">
            <div class="status-dot"></div>
            <span>ระบบออนไลน์</span>
          </div>
          <div class="status-item">
            <i class="fas fa-clock"></i>
            <span id="currentTime"></span>
          </div>
        </div>
      </div>

      <div class="panel" id="provincePanel">
        <h3><i class="fas fa-map-marker-alt"></i> โหมดจังหวัด (Province)</h3>
        <div class="row">
          <input id="provinceInput" placeholder="เช่น นครนายก, เชียงใหม่, ภูเก็ต" />
          <button onclick="byProvince()"><i class="fas fa-search"></i> ค้นหา</button>
        </div>
        <div id="list" style="max-height:500px;overflow:auto"></div>
      </div>
    </div>

    <div class="panel" style="margin-top:20px" id="mapPanel">
      <h3><i class="fas fa-globe-asia"></i> แผนที่ & สถานที่</h3>
      <div class="map-container">
        <div id="map" style="height:560px"></div>
      </div>
    </div>
  </div>

  <!-- Quick Action Buttons -->
  <div class="quick-actions">
    <button class="quick-btn" onclick="getCurrentLocation()" title="ตำแหน่งปัจจุบัน">
      <i class="fas fa-location-crosshairs"></i>
    </button>
    <button class="quick-btn" onclick="shareLocation()" title="แชร์ตำแหน่ง">
      <i class="fas fa-share-alt"></i>
    </button>
    <button class="quick-btn line-btn" onclick="openLineModal()" title="เพิ่มไลน์">
      <i class="fab fa-line"></i>
    </button>
  </div>

  <!-- Modal popup สำหรับ Line -->
  <div id="lineModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeLineModal()">&times;</span>
      
      <div class="line-logo">
        <i class="fab fa-line"></i>
      </div>
      
      <h2>เพิ่มเป็นเพื่อนใน LINE</h2>
      
      <div class="qr-code">
        <img src="static/line.png" alt="LINE QR Code">
      </div>
      
      <div class="line-id">
        <i class="fas fa-at"></i> 244thsjw
      </div>
      
      <button class="copy-btn" onclick="copyLineId()">
        <i class="fas fa-copy"></i> คัดลอ ID
      </button>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script>
    // Create animated particles
    function createParticles() {
      const particles = document.getElementById('particles');
      for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 20 + 's';
        particle.style.animationDuration = (Math.random() * 10 + 15) + 's';
        particles.appendChild(particle);
      }
    }

    // Line Modal Functions
    function openLineModal() {
      document.getElementById('lineModal').style.display = 'block';
    }

    function closeLineModal() {
      document.getElementById('lineModal').style.display = 'none';
    }

    function copyLineId() {
      navigator.clipboard.writeText('244thsjw');
      alert('คัดลอก Line ID แล้ว!');
    }

    window.onclick = function(event) {
      if (event.target == document.getElementById('lineModal')) {
        closeLineModal();
      }
    }

    // Menu functionality
    const menuToggle = document.getElementById('menuToggle');
    const sideMenu = document.getElementById('sideMenu');
    const menuOverlay = document.getElementById('menuOverlay');

    menuToggle.addEventListener('click', toggleMenu);
    menuOverlay.addEventListener('click', closeMenu);

    function toggleMenu() {
      menuToggle.classList.toggle('active');
      sideMenu.classList.toggle('open');
      menuOverlay.classList.toggle('show');
    }

    function closeMenu() {
      menuToggle.classList.remove('active');
      sideMenu.classList.remove('open');
      menuOverlay.classList.remove('show');
    }

    function scrollToSection(sectionId) {
      document.getElementById(sectionId).scrollIntoView({ behavior: 'smooth' });
      closeMenu();
    }

    function clearAllData() {
      if (confirm('คุณต้องการล้างข้อมูลทั้งหมดหรือไม่?')) {
        document.getElementById('origin').value = '';
        document.getElementById('dest').value = '';
        document.getElementById('provinceInput').value = '';
        document.getElementById('list').innerHTML = '';
        clearMarkers();
        logs.length = 0;
        updateLogDisplay();
        logInfo('🗑️ ล้างข้อมูลทั้งหมดเรียบร้อยแล้ว');
      }
      closeMenu();
    }

    function showStats() {
      alert('📊 สถิติการใช้งาน:\n\n• เส้นทางที่วางแผน: ' + (logs.filter(l => l.type === 'route').length) + ' ครั้ง\n• การค้นหา: ' + (logs.filter(l => l.type === 'search').length) + ' ครั้ง\n• ข้อผิดพลาด: ' + (logs.filter(l => l.type === 'error').length) + ' ครั้ง');
      closeMenu();
    }

    function showHelp() {
      alert('📖 คู่มือการใช้งาน:\n\n1. โหมดเส้นทาง: กรอกจุดเริ่มต้นและจุดหมาย\n2. เลือกประเภทสถานที่ที่สนใจ\n3. กดปุ่มแนะนำจุดแวะพัก\n4. โหมดจังหวัด: พิมพ์ชื่อจังหวัดเพื่อค้นหาสถานที่ท่องเที่ยว\n5. ใช้ปุ่ม "พิมพ์เป็นภาษาธรรมชาติ" สำหรับการสนทนา');
      closeMenu();
    }

    function showAbout() {
      alert('ℹ️ เกี่ยวกับเรา:\n\nTravel Route Chatbot Thailand\nพัฒนาด้วย AI เพื่อช่วยวางแผนการเดินทางในประเทศไทย\n\n✨ Features:\n• วางแผนเส้นทางอัจฉริยะ\n• แนะนำจุดท่องเที่ยว\n• ข้อมูลสภาพอากาศ\n• แผนที่แบบเรียลไทม์');
      closeMenu();
    }

    function getCurrentLocation() {
      if (navigator.geolocation) {
        logInfo('🌍 กำลังค้นหาตำแหน่งปัจจุบันของคุณ...');
        navigator.geolocation.getCurrentPosition(
          position => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            map.setView([lat, lng], 15);
            L.marker([lat, lng]).addTo(map).bindPopup('📍 ตำแหน่งปัจจุบันของคุณ').openPopup();
            logSuccess('✅ พบตำแหน่งปัจจุบันแล้ว');
          },
          error => {
            logError('❌ ไม่สามารถหาตำแหน่งได้: ' + error.message);
          }
        );
      } else {
        logError('❌ เบราว์เซอร์ไม่รองรับ GPS');
      }
    }

    function shareLocation() {
      const center = map.getCenter();
      const url = `https://www.google.com/maps/@${center.lat},${center.lng},15z`;
      if (navigator.share) {
        navigator.share({
          title: 'ตำแหน่งที่แชร์จาก Travel Route Chatbot',
          url: url
        });
      } else {
        navigator.clipboard.writeText(url);
        logSuccess('📋 คัดลอกลิงก์ตำแหน่งแล้ว');
      }
    }

    function updateCurrentTime() {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('th-TH', { 
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      const timeElement = document.getElementById('currentTime');
      if (timeElement) {
        timeElement.textContent = timeStr;
      }
    }

    // Beautiful Logging System
    const logs = [];

    function log(msg, type = 'info') {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('th-TH', { 
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      const logEntry = {
        time: timeStr,
        message: msg,
        type: type,
        id: Date.now() + Math.random()
      };
      
      const existingIndex = logs.findIndex(log => log.message === msg && log.type === type);
      if (existingIndex === -1) {
        logs.unshift(logEntry);
      }
      
      if (logs.length > 30) logs.pop();
      updateLogDisplay();
      
      try {
        fetch('/api/client_log', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ 
            message: msg, 
            timestamp: timeStr,
            type: type 
          })
        }).catch(() => {});
      } catch (e) {}
    }

    function updateLogDisplay() {
      const logElement = document.getElementById('log');
      if (!logElement) return;
      
      const logHTML = logs.map((entry, index) => {
        const typeClass = getLogTypeClass(entry.type);
        const icon = getLogIcon(entry.type);
        const isLatest = index === 0;
        
        return `
          <div class="log-entry ${typeClass} ${isLatest ? 'log-latest' : ''}" data-type="${entry.type}">
            <div class="log-left">
              <span class="log-time">${entry.time}</span>
              <span class="log-icon">${icon}</span>
            </div>
            <div class="log-content">
              <span class="log-message">${entry.message}</span>
              ${isLatest ? '<div class="log-pulse"></div>' : ''}
            </div>
          </div>
        `;
      }).join('');
      
      logElement.innerHTML = logHTML;
      if (logs.length > 0) {
        logElement.scrollTop = 0;
      }
    }

    function getLogTypeClass(type) {
      const typeClasses = {
        'info': 'log-info',
        'success': 'log-success', 
        'warning': 'log-warning',
        'error': 'log-error',
        'route': 'log-route',
        'search': 'log-search'
      };
      return typeClasses[type] || 'log-info';
    }

    function getLogIcon(type) {
      const icons = {
        'info': 'ℹ️',
        'success': '✅',
        'warning': '⚠️', 
        'error': '❌',
        'route': '🚗',
        'search': '🔍'
      };
      return icons[type] || 'ℹ️';
    }

    function logInfo(msg) { log(msg, 'info'); }
    function logSuccess(msg) { log(msg, 'success'); }
    function logWarning(msg) { log(msg, 'warning'); }
    function logError(msg) { log(msg, 'error'); }
    function logRoute(msg) { log(msg, 'route'); }
    function logSearch(msg) { log(msg, 'search'); }

    // Category management
    const CATS = ["ธรรมชาติ","วัด","คาเฟ่","ร้านอาหาร","แหล่งเรียนรู้","จุดชมวิว","ชุมชน/ตลาด"];
    const chips = document.getElementById('catChips');
    const sel = new Set(["ธรรมชาติ","คาเฟ่","วัด","ร้านอาหาร"]);
    
    CATS.forEach(c => {
      const el = document.createElement('div'); 
      el.className='chip on'; 
      el.textContent=c;
      el.onclick = () => { 
        if (sel.has(c)) {
          sel.delete(c); 
          el.classList.remove('on')
        } else {
          sel.add(c); 
          el.classList.add('on')
        } 
      };
      chips.appendChild(el);
    });

    // Map initialization
    const map = L.map('map').setView([13.736717, 100.523186], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { 
      maxZoom: 19,
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    let routeLayer = null;
    let markers = [];

    function clearMarkers(){
      markers.forEach(m => map.removeLayer(m));
      markers = [];
    }
    
    function drawRoute(poly){
      if (routeLayer) { map.removeLayer(routeLayer); routeLayer = null; }
      if (!poly) return;
      const coords = decodePolyline(poly).map(p => [p[0], p[1]]);
      routeLayer = L.polyline(coords, {
        color: '#ff2d8b',
        weight: 4,
        opacity: 0.8,
        dashArray: '10, 5'
      }).addTo(map);
      map.fitBounds(routeLayer.getBounds(), {padding:[20,20]});
    }
    
    // Simple polyline decoder
    function decodePolyline(encoded) {
        let points = []; let index = 0, len = encoded.length;
        let lat = 0, lng = 0;
        while (index < len) {
            let b, shift = 0, result = 0;
            do { b = encoded.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);
            let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1)); lat += dlat;
            shift = 0; result = 0;
            do { b = encoded.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);
            let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1)); lng += dlng;
            points.push([lat / 1e5, lng / 1e5]);
        }
        return points;
    }

    function addPlace(p, idx=0){
      if (!p.location) return;
      const customIcon = L.divIcon({
        className: 'custom-marker',
        html: `<div style="background: linear-gradient(135deg, #ff2d8b, #7b5cff); color: white; width: 30px; height: 30px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 12px; box-shadow: 0 4px 15px rgba(255, 45, 139, 0.4);">${idx || '📍'}</div>`,
        iconSize: [30, 30],
        iconAnchor: [15, 15]
      });
      
      const m = L.marker([p.location.lat, p.location.lng], {icon: customIcon}).addTo(map);
      markers.push(m);
      
      const weather = p.weather ? `<div class='weather'>
          ${p.weather.icon ? `<img src='${p.weather.icon}' width='32' height='32'/>` : ''}
          ${p.weather.condition || ''} ${p.weather.temp_c != null ? `• ${p.weather.temp_c.toFixed(0)}°C` : ''}
        </div>` : "";
      const oh = p.opening_hours_text ? `<div class='openhours'>${p.opening_hours_text.join("\\n")}</div>` : "";
      const detour = p.detour_minutes_est != null ? ` • เลี่ยงทางหลัก ~ ${p.detour_minutes_est} นาที` : "";
      const categories = p.categories ? ` • หมวด: ${p.categories.join(', ')}` : "";
      
      m.bindPopup(`
        <div class='place' style="min-width: 250px;">
          <div class='name' style="font-size: 16px; font-weight: 700; margin-bottom: 8px; color: #2d3748;">
            ${idx ? idx+'. ' : ''}${p.name || 'Unknown'}
          </div>
          <div class='meta' style="margin-bottom: 4px; color: #666;">${p.address || ''}</div>
          <div class='meta' style="margin-bottom: 8px; color: #666;">
            ⭐ ${p.rating || '-'} (${p.user_ratings_total || 0} รีวิว)${detour}${categories}
          </div>
          ${weather}
          ${oh}
          <div style='margin-top: 10px; padding-top: 8px; border-top: 1px solid #eee;'>
            <a href="${p.map_url}" target="_blank" style="color: #ff2d8b; text-decoration: none; font-weight: 500;">
              🗺️ เปิดใน Google Maps
            </a>
            ${p.website ? ` • <a href="${p.website}" target="_blank" style="color: #7b5cff; text-decoration: none; font-weight: 500;">🌐 เว็บไซต์</a>` : ""}
          </div>
        </div>
      `);
    }

    async function planRoute(){
      clearMarkers();
      const origin = document.getElementById('origin').value.trim();
      const dest = document.getElementById('dest').value.trim();
      
      if (!origin || !dest) { 
        logWarning('กรุณากรอกจุดเริ่มต้นและจุดหมายปลายทาง');
        return; 
      }
      
      const categories = [...sel];
      logSearch('🔍 เริ่มค้นหาเส้นทางและจุดแวะพัก...');
      logInfo(`📍 จาก: ${origin} ➜ ${dest}`);
      logInfo(`🎯 หมวดหมู่ที่เลือก: ${categories.join(', ')}`);
      
      try {
        const r = await fetch('/api/route_suggestions', {
          method:'POST', 
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ origin: origin, destination: dest, categories: categories })
        });
        const data = await r.json();
        
        if (!data || data.error) { 
          logError(`❌ เกิดข้อผิดพลาด: ${data.error || 'ไม่สามารถค้นหาเส้นทางได้'}`);
          return; 
        }
        
        if (data.route && data.route.polyline) {
          drawRoute(data.route.polyline);
          logRoute('🗺️ วาดเส้นทางบนแผนที่เรียบร้อยแล้ว');
        }
        
        if (data.stops && data.stops.length > 0) {
          data.stops.forEach((p, i) => addPlace(p, i+1));
          logSuccess(`🎉 พบจุดแวะพักที่แนะนำ ${data.stops.length} แห่ง`);
          
          // สรุปหมวดหมู่ที่พบ
          const foundCategories = new Set();
          data.stops.forEach(stop => {
            if (stop.categories) {
              stop.categories.forEach(cat => foundCategories.add(cat));
            }
          });
          
          if (foundCategories.size > 0) {
            logInfo(`📊 หมวดหมู่ที่พบ: ${[...foundCategories].join(', ')}`);
          }
        } else {
          logWarning('⚠️ ไม่พบจุดแวะพักที่เหมาะสมตามหมวดหมู่ที่เลือก');
        }
        
        if (data.route && data.route.distance_text && data.route.duration_text) {
          const summary = `🚗 ระยะทาง: ${data.route.distance_text} • ⏱️ เวลา: ${data.route.duration_text}`;
          logRoute(summary);
        }
        
        logSuccess('🎉 วางแผนเส้นทางเสร็จสมบูรณ์!');
        
      } catch (error) {
        logError(`❌ เกิดข้อผิดพลาดในการเชื่อมต่อ: ${error.message}`);
        console.error('Route planning error:', error);
      }
    }

    async function byProvince(){
      clearMarkers();
      const province = document.getElementById('provinceInput').value.trim();
      if (!province){ 
        logWarning('กรุณาพิมพ์ชื่อจังหวัด');
        return; 
      }
      
      const categories = [...sel];
      logSearch(`🔍 ค้นหาสถานที่ท่องเที่ยวในจังหวัด${province}...`);
      logInfo(`🎯 หมวดหมู่ที่เลือก: ${categories.join(', ')}`);
      
      try {
        const r = await fetch('/api/search_by_province', { 
          method:'POST', 
          headers:{'Content-Type':'application/json'}, 
          body: JSON.stringify({ province, categories: categories }) 
        });
        const data = await r.json();
        const list = document.getElementById('list'); 
        list.innerHTML='';
        
        if (!data || data.error) { 
          logError(`❌ ${data.error || 'เกิดข้อผิดพลาด'}`);
          list.innerHTML = `<div style="padding: 20px; text-align: center; color: #ef4444;">${data.error || 'เกิดข้อผิดพลาด'}</div>`;
          return; 
        }
        
        data.items.forEach((p,i) => {
          addPlace(p, i+1);
          const div = document.createElement('div'); 
          div.className='place';
          div.innerHTML = `
            <div class='name'>${i+1}. ${p.name}</div>
            <div class='meta'>${p.address || ''}</div>
            <div class='meta'>⭐ ${p.rating || '-'} (${p.user_ratings_total || 0} รีวิว)</div>
            ${p.categories ? `<div class='meta' style="color: #7b5cff;">📂 ${p.categories.join(', ')}</div>` : ""}
            ${p.opening_hours_text ? `<div class='openhours'>${p.opening_hours_text.join("<br/>")}</div>` : ""}
            ${p.weather ? `<div class='weather'>
              ${p.weather.icon ? `<img src='${p.weather.icon}' width='28' height='28'/>` : ''}
              ${p.weather.condition || ''} ${p.weather.temp_c != null ? `• ${p.weather.temp_c.toFixed(0)}°C` : ''}
            </div>` : ""}
            <div style='margin-top:8px'>
              <a href="${p.map_url}" target="_blank">Google Maps</a>
              ${p.website ? ` • <a href="${p.website}" target="_blank">เว็บไซต์</a>` : ""}
            </div>
          `;
          list.appendChild(div);
        });
        
        if (data.items.length) {
          const lat = data.items[0].location.lat, lng = data.items[0].location.lng;
          map.setView([lat,lng], 9);
          
          // สรุปหมวดหมู่ที่พบ
          const foundCategories = new Set();
          data.items.forEach(item => {
            if (item.categories) {
              item.categories.forEach(cat => foundCategories.add(cat));
            }
          });
          
          logSuccess(`✅ พบสถานที่ท่องเที่ยวใน${province} จำนวน ${data.items.length} แห่ง`);
          if (foundCategories.size > 0) {
            logInfo(`📊 หมวดหมู่ที่พบ: ${[...foundCategories].join(', ')}`);
          }
        } else {
          logWarning('⚠️ ไม่พบสถานที่ท่องเที่ยวในจังหวัดนี้ตามหมวดหมู่ที่เลือก');
        }
        
      } catch (error) {
        logError(`❌ เกิดข้อผิดพลาดในการเชื่อมต่อ: ${error.message}`);
        console.error('Province search error:', error);
      }
    }

    async function nlQuery(){
      const text = prompt('พิมพ์ข้อความ เช่น "จะขับรถจาก กทม ไป เชียงใหม่ แวะไหนดี คาเฟ่ ธรรมชาติ?"');
      if (!text) return;
      
      logSearch('🤖 กำลังประมวลผลภาษาธรรมชาติ...');
      logInfo(`💬 คำสั่ง: ${text}`);
      
      try {
        const r = await fetch('/api/nl_route', { 
          method:'POST', 
          headers:{'Content-Type':'application/json'}, 
          body: JSON.stringify({ text }) 
        });
        const data = await r.json();
        
        if (data.error) { 
          logError(`❌ ${data.error}`);
          return; 
        }
        
        document.getElementById('origin').value = data.origin || '';
        document.getElementById('dest').value = data.destination || '';
        
        // update categories
        const want = new Set(data.categories || []);
        document.querySelectorAll('#catChips .chip').forEach(el => {
          const c = el.textContent; 
          if (want.has(c)) { 
            el.classList.add('on'); 
            sel.add(c); 
          } else { 
            el.classList.remove('on'); 
            sel.delete(c); 
          }
        });
        
        logSuccess('🎯 ประมวลผลภาษาธรรมชาติสำเร็จ เริ่มค้นหาเส้นทาง...');
        planRoute();
        
      } catch (error) {
        logError(`❌ เกิดข้อผิดพลาดในการประมวลผล: ${error.message}`);
        console.error('NL processing error:', error);
      }
    }

    // Initialize everything
    document.addEventListener('DOMContentLoaded', function() {
      createParticles();
      updateCurrentTime();
      setInterval(updateCurrentTime, 1000);
      
      // Initialize with welcome message
      setTimeout(() => {
        logInfo('🌟 ยินดีต้อนรับสู่ Travel Route Chatbot Thailand!');
        logInfo('💡 เลือกหมวดหมู่สถานที่ที่สนใจแล้วเริ่มวางแผนเดินทางได้เลย');
      }, 1000);
    });
  </script>
</body>
</html>
"""

@app.route("/")
def index():
    return render_template_string(INDEX_HTML)

@app.route("/api/client_log", methods=["POST"])
def client_log():
    data = request.get_json()
    ts = data.get("timestamp") or datetime.now().strftime("%H:%M:%S")
    msg = data.get("message", "")
    line = f"[{ts}] {msg}"
    if not client_logs or client_logs[0] != line:  # กันซ้ำ
        client_logs.insert(0, line)
    if len(client_logs) > 50:
        client_logs.pop()
    print(line)  # พิมพ์ลง console
    return jsonify({"status": "ok", "logs": client_logs})

@app.route("/api/search_by_province", methods=["POST"])
def api_search_by_province():
    data = request.get_json(force=True)
    province = data.get("province", "").strip().replace("จังหวัด","").strip()
    categories = data.get("categories", [])
    if not province:
        return jsonify({"error": "โปรดระบุจังหวัด"}), 400
    resp = search_by_province(province, categories)
    return jsonify(resp)

@app.route("/api/route_suggestions", methods=["POST"])
def api_route_suggestions():
    data = request.get_json(force=True)
    origin = data.get("origin")
    dest = data.get("destination")
    cats = data.get("categories", [])
    mode = data.get("mode", "driving")
    if not origin or not dest:
        return jsonify({"error": "ต้องมี origin และ destination"}), 400
    resp = route_suggestions(origin, dest, cats, mode)
    return jsonify(resp)

@app.route("/api/nl_route", methods=["POST"])
def api_nl_route():
    data = request.get_json(force=True)
    text = data.get("text", "")
    if not text:
        return jsonify({"error": "no text"}), 400
    parsed = gemini_understand(text)
    return jsonify(parsed)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    print("🚀 Travel Route Chatbot is running at http://localhost:%d" % port)
    if not GOOGLE_MAPS_API_KEY:
        print("⚠️  Missing GOOGLE_MAPS_API_KEY in environment")
    if not OPENWEATHER_API_KEY:
        print("⚠️  Missing OPENWEATHER_API_KEY (weather optional)")
    app.run(host="0.0.0.0", port=port, debug=True)